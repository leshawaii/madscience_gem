#!/usr/bin/env ruby

# Parameters which can be passed in environment variables
MADSCIENCE_REPO_URL = ENV['MADSCIENCE_REPO'] ||
  "git@github.com:noahgibbs/madscience.git"
MADSCIENCE_PROVIDER = ENV['MADSCIENCE_PROVIDER'] || "virtualbox"

require "madscience/version"

if ARGV == [ "--version" ]
  puts MadScience::VERSION
  exit 0
end

# TODO: Add Windows runas incantation to replace sudo on Windows
USAGE_INFO = <<USAGE
Usage:
  sudo #{$0} construct

  OR

  rvmsudo #{$0} construct

Other commands:
  setup - install dev machine tools for madscience stack. Run as sudo.
  clone - clone a new repository, called madscience, under this dir
USAGE

# First, make sure we have the right Ruby version
# TODO: add more checks for RUBY_VERSION, RUBY_PLATFORM, etc. Ensure MRI.
if RUBY_PLATFORM == "java"
  raise "Please install and run the MadScience gem in the Ruby you'll be deploying with! That means MRI 2.0.0+!"
end
unless RUBY_VERSION[0..1] == "2."
  raise "Please install Ruby version 2.0.0+ for MadScience compatibility!"
end

require "madscience"
require "madscience/version"

def in_madscience_dir
  initial_dir = Dir.pwd

  # Change to MadScience dir to get correct Gemfile
  ms_path = $LOAD_PATH.detect { |p| File.exist? File.join(p, "..", ".madscience_gem_location") }
  raise "Can't find MadScience gem in $LOAD_PATH: #{$LOAD_PATH.inspect}!" unless ms_path
  Dir.chdir File.join(ms_path, "..")

  yield

  Dir.chdir initial_dir
end

# Set up Bundler with the MadScience gem's Gemfile
require "bundler"
in_madscience_dir { Bundler.setup }

def check_superuser
  raise "Must run as superuser!" unless Process.uid == 0
end

def get_sudo_user
  raise "Can't find your $SUDO_USER!" unless ENV['SUDO_USER']
  ENV['SUDO_USER']
end

def get_sudo_uid
  raise "Can't find your $SUDO_UID!" unless ENV['SUDO_UID']
  ENV['SUDO_UID'].to_i
end

def drop_sudo_privileges
  Process::Sys.setuid get_sudo_uid
end

def do_local_setup
  in_madscience_dir do
    system("librarian-chef", "install")
    system("chown -R #{get_sudo_user} cookbooks")
    system("chef-solo", "-c", "solo.rb") or raise "Failed during chef run!"
  end
end

def do_clone
  # Clone the MadScience repo
  # TODO: check out MadScience::VERSION branch when we start having stable releases
  unless system "git clone #{MADSCIENCE_REPO_URL} madscience"
    raise "Couldn't successfully clone MadScience repo from #{MADSCIENCE_REPO_URL}!"
  end
end

def do_deploy
  # Deploy from the 'madscience' dir under this directory

  cmd = "cd madscience && vagrant up --provision --provider=#{MADSCIENCE_PROVIDER}"

  # Does this display STDOUT properly?
  pid = Kernel.spawn cmd
  Process.wait pid  # Wait for process to finish

  unless $?.success?
    raise "Deploy process failed with status #{$?.exitstatus}! Fix and/or re-run using 'vagrant provision'!"
  end

  puts <<-MESSAGE
You have successfully deployed the default Rails application in your repository (#{MADSCIENCE_REPO_URL}).
Congratulations! If this isn't your actual Rails application, go and modify madscience/nodes/all_nodes.json.erb.
You can find documentation in the RubyMadScience wiki: 
    https://github.com/noahgibbs/madscience/wiki

Have fun with RubyMadScience!
  MESSAGE
end

# No subcommand takes arguments (yet?)
if ARGV.size > 1
  raise "#{$0} #{ARGV[0]} takes no other arguments!"
end

if ARGV[0] == "setup"
  # Now we'll use Chef to install the right version of Vagrant
  # with the right plugin(s).

  check_superuser
  do_local_setup
  exit 0  # Success!
end

if ARGV[0] == "clone"
  do_clone

  puts "Successfully cloned repo under this directory. Now customize nodes/all_nodes.json.erb!"
  exit 0
end

if ARGV[0] == "setup_clone_and_deploy" || ARGV[0] == "construct"
  check_superuser
  do_local_setup

  drop_sudo_privileges

  do_clone
  do_deploy

  puts "Successfully cloned repo #{MADSCIENCE_REPO_URL} under this directory. Now customize nodes/all_nodes.json.erb!"
  exit 0
end

if ARGV == []
  puts USAGE_INFO
  raise "No command given!"
end

puts USAGE_INFO
raise "Unrecognized command: #{ARGV.inspect}!"
